-- hi lmao, welcome to some ugly code. most of this is copied from other stuff
local utilities = {}
local user = game:GetService("Players").LocalPlayer
local pathfinding_service = game:GetService("PathfindingService")
local Path = pathfinding_service:CreatePath()
local movement = {}
local triedDoors = {}
 local WAIT_SPEED = 1 / 45
 local Vehicle_Speed = 600
 local Player_Speed = 175
 local tried = {}
 local door_positions = { }
 function utilities:toggle_door_collision(door, toggle)
    for index, child in next, door.Model:GetChildren() do 
        if child:IsA("BasePart") then 
            child.CanCollide = toggle;
        end; 
    end;
end;

 local RaycastParams = RaycastParams.new()
 RaycastParams.FilterType = Enum.RaycastFilterType.Blacklist
RaycastParams.FilterDescendantsInstances = { user.Character, workspace.Vehicles, workspace:FindFirstChild("Rain")}

workspace.ChildAdded:Connect(function(child)
    if child.Name == "Rain" then 
        table.insert(RaycastParams.FilterDescendantsInstances, child)
    end
end)

user.CharacterAdded:Connect(function(character)
    table.insert(RaycastParams.FilterDescendantsInstances, character)
end)
  function movement:pathfind(tried)
    local distance = math.huge
    local nearest

    for index, value in next, door_positions do
        if not table.find(triedDoors, value) then
            local magnitude = (value.position - user.Character.HumanoidRootPart.Position).Magnitude
            
            if magnitude < distance then 
                distance = magnitude
                nearest = value
            end
        end
    end

    table.insert(triedDoors, nearest)

    utilities:toggle_door_collision(nearest.instance, false)

    local path = Path
    path:ComputeAsync(user.Character.HumanoidRootPart.Position, nearest.position)

    if path.Status == Enum.PathStatus.Success then
        local waypoints = path:GetWaypoints()

        for index = 1, #waypoints do 
            local waypoint = waypoints[index]
            
            user.Character.HumanoidRootPart.CFrame = CFrame.new(waypoint.Position + Vector3.new(0, 2.5, 0))

            if not workspace:Raycast(user.Character.HumanoidRootPart.Position, Vector3.new(0, 750, 0), RaycastParams) then
                utilities:toggle_door_collision(nearest.instance, true)

                return
            end

            task.wait(0.05)
        end
    end

    utilities:toggle_door_collision(nearest.instance, true)

    movement:pathfind(triedDoors)
end
for index, value in next, workspace:GetDescendants() do
    if value.Name:sub(-4, -1) == "Door" and not value:IsDescendantOf(workspace:WaitForChild("MansionRobbery"), math.huge) then 
        local touch_part = value:FindFirstChild("Touch");

        if touch_part and touch_part:IsA("BasePart") then
            for distance = 5, 100, 5 do 
                local forward_position, backward_position = touch_part.Position + touch_part.CFrame.LookVector * (distance + 3), touch_part.Position + touch_part.CFrame.LookVector * -(distance + 3); -- distance + 3 studs forward and backward from the door
                
                if not workspace:Raycast(forward_position, Vector3.new(0, 750, 0), RaycastParams) then
                    table.insert(door_positions, { instance = value, position = forward_position });

                    break;
                elseif not workspace:Raycast(backward_position, Vector3.new(0, 750, 0), RaycastParams) then
                    table.insert(door_positions, { instance = value, position = backward_position });

                    break;
                end;
            end;
        end;
    end;
end;
function utilities:Move_To_Position(Target, Speed, Part, TeleportUp, Vehicle)
require(game:GetService("ReplicatedStorage").Tag.TagUtils).isPointInTag = newcclosure(function(a, xD)
if xD == "NoFallDamage" or xD == "NoRagdoll" or xD == "NoParachute" then
return true
end
end)
    if not Vehicle and workspace:Raycast(Part.Position, Vector3.new(0, 750, 0), RaycastParams) then
        movement:pathfind();
        task.wait(0.5);
    end;
    
local relative_position = (Target.Position - user.Character.HumanoidRootPart.Position)
    local target_distance = relative_position.Magnitude

    if target_distance <= 20 and not workspace:Raycast(user.Character.HumanoidRootPart.Position, relative_position.Unit * target_distance, RaycastParams) then 
        user.Character:PivotTo(Target)
        
        return
    end 
 local vector_position = Target.Position
 local y_level = 750
    local higher_position = Vector3.new(vector_position.X, y_level, vector_position.Z)
local SPEED_LIMITER = Speed
 local root_part = Part
 local target = Target
 local start = root_part.CFrame
 local distance = (target.p - start.p).magnitude
task.spawn(function()
if TeleportUp ~= nil then
 repeat
Part.CFrame = CFrame.new(Part.CFrame.X, y_level, Part.CFrame.Z)
root_part.Velocity = Vector3.new()

task.wait()
    until (Part.Position - higher_position).Magnitude < 15
	    Part:PivotTo(CFrame.new(Part.Position.X, vector_position.Y, Part.Position.Z))
    Part.Velocity = Vector3.zero
end
end)
 for i = 0, 1, (SPEED_LIMITER / distance) * WAIT_SPEED do
   local new_position = start:lerp(target, i)
   root_part:PivotTo(new_position)
   Part.CFrame = CFrame.new(Part.CFrame.X, y_level, Part.CFrame.Z)
root_part.Velocity = Vector3.new()
   wait(WAIT_SPEED)
 end
 Part:PivotTo(CFrame.new(Part.Position.X, vector_position.Y, Part.Position.Z))
wait(1)
require(game:GetService("ReplicatedStorage").Tag.TagUtils).isPointInTag = newcclosure(function(a, xD)
if xD == "NoFallDamage" or xD == "NoRagdoll" or xD == "NoParachute" then
return false
end
end)
end
function utilities:GrabVehicle(Target, Speed)
    for i,v in pairs(workspace.Vehicles:GetChildren()) do
if v.Name == "Camaro" and not workspace:Raycast(v.Seat.Position, Vector3.new(0, 750, 0), RaycastParams) and not table.find(tried, v) then
 local relative_position = (Target.Position - user.Character.HumanoidRootPart.Position)
    local target_distance = relative_position.Magnitude
        local vehicle_distance = (v.Seat.Position - user.Character.HumanoidRootPart.Position).Magnitude
     if target_distance < vehicle_distance then
utilities:Move_To_Position(Target, Player_Speed, user.Character.HumanoidRootPart, true)
return
end
utilities:Move_To_Position(v.Seat.CFrame, Speed, user.Character.HumanoidRootPart, true)
local Positions = { [1] = v.Seat.Position }

local TweenService = game:GetService("TweenService")
			
local istping = true
task.spawn(function()
	repeat
		game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new()
		task.wait()
	until not istping
end)
for i,v in pairs(Positions) do
	local Tween = TweenService:Create(game.Players.LocalPlayer.Character.HumanoidRootPart, TweenInfo.new((game.Players.LocalPlayer.Character.HumanoidRootPart.Position-v).Magnitude/100, Enum.EasingStyle.Linear), {CFrame = CFrame.new(v)})
	Tween:Play()
	Tween.Completed:Wait()
end
istping = false
local UI = require(game:GetService("ReplicatedStorage").Module:WaitForChild("UI"))
local EnterDriver
for x,b in pairs (UI.CircleAction.Specs) do
if b.IsVehicle and b.ShouldAllowEntry and b.Enabled and b.Name == "Enter Driver" and b.ValidRoot == v then
EnterDriver = b
end
end
local Attempts = 1
repeat
Attempts = Attempts + 1
EnterDriver:Callback(true)
wait(0.1)
until Attempts == 10 or not v:FindFirstChild("Seat") or not v.Seat:FindFirstChild('PlayerName') or v.Seat.PlayerName.Value == user.Name
if not v:FindFirstChild("Seat") or not v.Seat:FindFirstChild("PlayerName") or not v.Seat.PlayerName.Value == user.Name then
table.insert(tried, v)
 utilities:GrabVehicle(Target, Player_Speed)
return
else
utilities:Move_To_Position(Target, Vehicle_Speed, v.PrimaryPart, true, true)
return
end
end
end
end
local function Teleport(Target)
    if not workspace:Raycast(Target.Position, Vector3.new(0, 750, 0), RaycastParams) then
 if (user.Character.HumanoidRootPart.Position - Target.Position).Magnitude < 100 then
utilities:Move_To_Position(Target, Player_Speed, user.Character.HumanoidRootPart, true)
return
end
    if user.Character.Humanoid:GetState() == Enum.HumanoidStateType.Seated then
for i,v in pairs(workspace.Vehicles:GetChildren()) do
if v:FindFirstChild("_VehicleState_"..game:GetService("Players").LocalPlayer.Name) then
utilities:Move_To_Position(Target, Vehicle_Speed, v.PrimaryPart, true, true)
return
end
end
else
utilities:GrabVehicle(Target, Player_Speed)
return
end
end
end
return Teleport
